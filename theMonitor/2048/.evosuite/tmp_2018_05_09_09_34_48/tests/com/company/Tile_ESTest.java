/*
 * This file was automatically generated by EvoSuite
 * Wed May 09 02:37:34 GMT 2018
 */

package com.company;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.company.Point;
import com.company.Tile;
import java.awt.Graphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Tile_ESTest extends Tile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Tile tile0 = new Tile(595, 595, 16181363);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      tile0.render(graphics2D0);
      assertEquals(595, tile0.getValue());
      assertEquals(595, tile0.getX());
      assertTrue(tile0.canCombine());
      assertEquals(16181363, tile0.getY());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tile tile0 = new Tile(0, 16, 0);
      int int0 = tile0.getY();
      assertEquals(0, tile0.getValue());
      assertEquals(0, int0);
      assertEquals(16, tile0.getX());
      assertTrue(tile0.canCombine());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tile tile0 = new Tile((-1951), (-1951), (-1951));
      int int0 = tile0.getY();
      assertEquals((-1951), tile0.getX());
      assertTrue(tile0.canCombine());
      assertEquals((-1951), int0);
      assertEquals((-1951), tile0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tile tile0 = new Tile(1341, 0, 0);
      int int0 = tile0.getX();
      assertEquals(1341, tile0.getValue());
      assertEquals(0, tile0.getY());
      assertEquals(0, int0);
      assertTrue(tile0.canCombine());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tile tile0 = new Tile(1293, 1293, 1293);
      int int0 = tile0.getX();
      assertEquals(1293, int0);
      assertTrue(tile0.canCombine());
      assertEquals(1293, tile0.getY());
      assertEquals(1293, tile0.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tile tile0 = new Tile(0, 500, 16770048);
      int int0 = tile0.getValue();
      assertEquals(16770048, tile0.getY());
      assertEquals(0, int0);
      assertEquals(500, tile0.getX());
      assertTrue(tile0.canCombine());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tile tile0 = new Tile(15892487, 15892487, 15892487);
      int int0 = tile0.getValue();
      assertEquals(15892487, int0);
      assertTrue(tile0.canCombine());
      assertEquals(15892487, tile0.getY());
      assertEquals(15892487, tile0.getX());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tile tile0 = new Tile((-1951), (-1951), (-1951));
      tile0.setSlideTo((Point) null);
      tile0.getSlideTo();
      assertEquals((-1951), tile0.getValue());
      assertEquals((-1951), tile0.getX());
      assertEquals((-1951), tile0.getY());
      assertTrue(tile0.canCombine());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tile tile0 = new Tile((-1951), (-1951), (-1951));
      assertTrue(tile0.canCombine());
      
      tile0.setCanCombine(false);
      tile0.canCombine();
      assertEquals((-1951), tile0.getX());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Tile tile0 = new Tile(512, 512, 512);
      assertTrue(tile0.canCombine());
      assertEquals(512, tile0.getX());
      assertEquals(512, tile0.getY());
      assertEquals(512, tile0.getValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Tile tile0 = new Tile(256, 256, 256);
      assertTrue(tile0.canCombine());
      assertEquals(256, tile0.getValue());
      assertEquals(256, tile0.getX());
      assertEquals(256, tile0.getY());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tile tile0 = new Tile(8, 8, 8);
      tile0.setValue(128);
      assertEquals(128, tile0.getValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tile tile0 = new Tile(950, 64, 64);
      assertEquals(950, tile0.getValue());
      
      tile0.setValue(64);
      assertEquals(64, tile0.getValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tile tile0 = new Tile(32, 32, 32);
      assertTrue(tile0.canCombine());
      assertEquals(32, tile0.getX());
      assertEquals(32, tile0.getValue());
      assertEquals(32, tile0.getY());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tile tile0 = new Tile(412, 2048, 2048);
      tile0.setValue(16);
      assertEquals(16, tile0.getValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tile tile0 = new Tile(4, 16, 16);
      assertTrue(tile0.canCombine());
      assertEquals(4, tile0.getValue());
      assertEquals(16, tile0.getX());
      assertEquals(16, tile0.getY());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tile tile0 = new Tile(2, 2, 2);
      assertEquals(2, tile0.getX());
      assertEquals(2, tile0.getY());
      assertTrue(tile0.canCombine());
      assertEquals(2, tile0.getValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tile tile0 = new Tile((-7), (-7), 128);
      boolean boolean0 = tile0.canCombine();
      assertEquals(128, tile0.getY());
      assertTrue(boolean0);
      assertEquals((-7), tile0.getValue());
      assertEquals((-7), tile0.getX());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tile tile0 = new Tile((-7), (-7), 128);
      int int0 = tile0.getX();
      assertEquals((-7), int0);
      assertEquals((-7), tile0.getValue());
      assertTrue(tile0.canCombine());
      assertEquals(128, tile0.getY());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Tile tile0 = new Tile(950, 64, 64);
      Point point0 = tile0.getSlideTo();
      tile0.setSlideTo(point0);
      assertEquals(950, tile0.getValue());
      assertEquals(64, tile0.getY());
      assertEquals(64, point0.row);
      assertTrue(tile0.canCombine());
      assertEquals(64, tile0.getX());
      assertEquals(64, point0.col);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tile tile0 = new Tile((-7), (-7), 128);
      int int0 = tile0.getY();
      assertEquals((-7), tile0.getX());
      assertEquals((-7), tile0.getValue());
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tile tile0 = new Tile((-7), (-7), 128);
      int int0 = tile0.getValue();
      assertEquals((-7), int0);
      assertEquals(128, tile0.getY());
      assertEquals((-7), tile0.getX());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tile tile0 = new Tile((-7), (-7), 128);
      assertEquals(128, tile0.getY());
      
      tile0.setY((-7));
      assertEquals((-7), tile0.getValue());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tile tile0 = new Tile(2048, 2048, (-1186));
      tile0.update();
      assertEquals(2048, tile0.getValue());
      assertEquals((-1186), tile0.getY());
      assertEquals(2048, tile0.getX());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tile tile0 = new Tile(8, 8, 1024);
      tile0.setX(4029);
      assertEquals(4029, tile0.getX());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tile tile0 = new Tile(8, 8, 1024);
      // Undeclared exception!
      try { 
        tile0.render((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.company.Tile", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tile tile0 = new Tile((-19), (-19), 1024);
      tile0.setValue(1024);
      assertEquals(1024, tile0.getValue());
  }
}
